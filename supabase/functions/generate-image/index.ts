import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
};

const MAX_RETRIES = 2;
const RETRY_DELAY_MS = 1000;

async function validateComplianceBeforeGeneration(
  formData: any, 
  apiKey: string
): Promise<{ approved: boolean; violations: string[]; recommendation: string }> {
  
  const analysisPrompt = `
Voc√™ √© um especialista em compliance publicit√°rio brasileiro (CONAR/CDC).

Analise se a seguinte solicita√ß√£o de imagem publicit√°ria viola alguma regulamenta√ß√£o:

SOLICITA√á√ÉO:
- Descri√ß√£o: ${cleanInput(formData.description)}
- Informa√ß√µes adicionais: ${cleanInput(formData.additionalInfo)}
- Marca: ${cleanInput(formData.brand)}
- Tema: ${cleanInput(formData.theme)}
- Objetivo: ${cleanInput(formData.objective)}

REGULAMENTA√á√ïES A VERIFICAR:
1. Associa√ß√£o de √°lcool com dire√ß√£o/esporte/sucesso/menores
2. Apelo direto de compra para crian√ßas
3. Discrimina√ß√£o (racial, g√™nero, religiosa, social)
4. Representa√ß√£o de viol√™ncia, medo n√£o-educativo, crueldade
5. Alega√ß√µes enganosas ou exageradas
6. Erotiza√ß√£o desnecess√°ria ou nudez excessiva
7. Est√≠mulo a consumo excessivo (alimentos/apostas)
8. Greenwashing (alega√ß√µes ambientais falsas)
9. Compara√ß√£o denigrat√≥ria com concorrentes

RESPONDA EM JSON:
{
  "approved": boolean,
  "violations": ["lista de viola√ß√µes identificadas"],
  "recommendation": "sugest√£o para ajustar a solicita√ß√£o"
}
`;

  try {
    const response = await fetch("https://ai.gateway.lovable.dev/v1/chat/completions", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${apiKey}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: "google/gemini-2.5-flash",
        messages: [{ role: "user", content: analysisPrompt }],
        response_format: { type: "json_object" }
      }),
    });

    if (!response.ok) {
      console.error("‚ùå Erro na valida√ß√£o de compliance:", response.status);
      // Em caso de erro na valida√ß√£o, permitir gera√ß√£o (n√£o bloquear por falha t√©cnica)
      return { approved: true, violations: [], recommendation: "" };
    }

    const data = await response.json();
    const analysis = JSON.parse(data.choices[0].message.content);
    
    return analysis;
  } catch (error) {
    console.error("‚ùå Erro ao validar compliance:", error);
    // Em caso de erro, permitir gera√ß√£o (n√£o bloquear por falha t√©cnica)
    return { approved: true, violations: [], recommendation: "" };
  }
}

function cleanInput(text: string | string[] | undefined | null): string {
  if (!text) return "";
  if (Array.isArray(text)) {
    return text.map(item => cleanInput(item)).join(", ");
  }
  const textStr = String(text);
  let cleanedText = textStr.replace(/[<>{}[\]"'`]/g, "");
  cleanedText = cleanedText.replace(/\s+/g, " ").trim();
  return cleanedText;
}

function buildDetailedPrompt(formData: any): string {
  const brand = cleanInput(formData.brand);
  const theme = cleanInput(formData.theme);
  const persona = cleanInput(formData.persona);
  const platform = cleanInput(formData.platform);
  const objective = cleanInput(formData.objective);
  const description = cleanInput(formData.description);
  const tones = Array.isArray(formData.tone) ? formData.tone : (formData.tone ? [formData.tone] : []);
  const additionalInfo = cleanInput(formData.additionalInfo);
  const hasReferenceImages = formData.referenceImages && Array.isArray(formData.referenceImages) && formData.referenceImages.length > 0;
  
  // Informa√ß√µes sobre origem das imagens
  const brandImagesCount = formData.brandImagesCount || 0;
  const userImagesCount = formData.userImagesCount || 0;
  const totalImages = hasReferenceImages ? formData.referenceImages.length : 0;

  // Advanced configurations
  const negativePrompt = cleanInput(formData.negativePrompt);
  const colorPalette = formData.colorPalette || 'auto';
  const lighting = formData.lighting || 'natural';
  const composition = formData.composition || 'auto';
  const cameraAngle = formData.cameraAngle || 'eye_level';
  const detailLevel = formData.detailLevel || 7;
  const mood = formData.mood || 'auto';
  
  // Dimens√µes customizadas (com valida√ß√£o)
  let customWidth = formData.width ? parseInt(formData.width) : null;
  let customHeight = formData.height ? parseInt(formData.height) : null;
  
  // Validar dimens√µes (512-2048px, m√∫ltiplos de 64)
  if (customWidth) {
    customWidth = Math.max(512, Math.min(2048, Math.round(customWidth / 64) * 64));
  }
  if (customHeight) {
    customHeight = Math.max(512, Math.min(2048, Math.round(customHeight / 64) * 64));
  }

  const promptParts: string[] = [];

  // === COMPLIANCE COM REGULAMENTA√á√ÉO PUBLICIT√ÅRIA BRASILEIRA (CONAR/CDC) ===
  const complianceGuidelines = [
    "DIRETRIZES √âTICAS E LEGAIS OBRIGAT√ìRIAS (C√≥digo CONAR e CDC - Brasil):",
    "1. HONESTIDADE E VERACIDADE: A imagem N√ÉO PODE induzir ao erro ou enganar sobre caracter√≠sticas do produto/servi√ßo. Evite exageros visuais imposs√≠veis, representa√ß√µes irreais de resultados, ou qualquer elemento que possa criar falsas expectativas. Se mostrar benef√≠cios, eles devem ser plaus√≠veis e comprov√°veis visualmente.",
    "2. RESPEITO E DIGNIDADE HUMANA: PROIBIDO qualquer forma de discrimina√ß√£o (racial, √©tnica, social, g√™nero, orienta√ß√£o sexual, religiosa, et√°ria, defici√™ncia f√≠sica). N√ÉO retrate estere√≥tipos depreciativos. Respeite s√≠mbolos nacionais, religiosos e culturais. N√ÉO explore o medo como apelo (exceto campanhas de interesse p√∫blico). N√ÉO sugira ou mostre viol√™ncia, crueldade ou situa√ß√µes de risco √† seguran√ßa. N√ÉO explore supersti√ß√µes de forma manipuladora.",
    "3. PROTE√á√ÉO DE P√öBLICOS VULNER√ÅVEIS (Crian√ßas/Adolescentes): Se o p√∫blico-alvo incluir menores, aplique restri√ß√µes M√ÅXIMAS. N√ÉO fa√ßa apelo direto de compra para crian√ßas. N√ÉO mostre situa√ß√µes que possam constranger pais a comprar. N√ÉO apresente crian√ßas em situa√ß√µes perigosas, inadequadas ou constrangedoras. N√ÉO use linguagem imperativa direcionada a crian√ßas.",
    "4. BEBIDAS ALCO√ìLICAS (Se aplic√°vel): NUNCA mostre ou sugira o ato de consumo/ingest√£o da bebida. N√ÉO associe √°lcool a: sucesso profissional/social/sexual, condu√ß√£o de ve√≠culos, pr√°ticas esportivas, maturidade ou virilidade. N√ÉO sugira que o √°lcool melhora desempenho ou resolve problemas. Pessoas mostradas devem aparentar claramente mais de 25 anos.",
    "5. ALIMENTOS E BEBIDAS: N√ÉO estimule consumo excessivo ou compulsivo. Se mostrar alega√ß√µes nutricionais/funcionais, mantenha proporcionalidade visual realista. N√ÉO crie falsas expectativas sobre efeitos de sa√∫de. Por√ß√µes devem ser realistas e proporcionais.",
    "6. APOSTAS E JOGOS (Se aplic√°vel): OBRIGAT√ìRIO incluir s√≠mbolo 18+ de forma vis√≠vel e leg√≠vel. Pessoas representadas devem aparentar MAIS de 21 anos. N√ÉO apresente apostas como solu√ß√£o para problemas financeiros. N√ÉO mostre enriquecimento f√°cil ou garantido. N√ÉO associe apostas a sucesso social ou sexual.",
    "7. APELOS DE SUSTENTABILIDADE: Se houver elementos eco ou sustent√°veis, eles devem ser REALISTAS e COMPROV√ÅVEIS. N√ÉO fa√ßa greenwashing (falsas alega√ß√µes ambientais). Benef√≠cios ambientais devem ser espec√≠ficos, n√£o gen√©ricos ou vagos. N√ÉO exagere impactos positivos ao meio ambiente.",
    "8. COMPARA√á√ÉO COM CONCORRENTES: Se comparar produtos/marcas, seja OBJETIVO e baseado em fatos visuais. N√ÉO ridicularize, deprecie ou denigra concorrentes. Mantenha lealdade concorrencial e respeito.",
    "9. DEC√äNCIA E PADR√ïES SOCIAIS: Respeite padr√µes contempor√¢neos de dec√™ncia da sociedade brasileira. N√ÉO use nudez excessiva ou erotiza√ß√£o desnecess√°ria. Linguagem visual deve ser apropriada para o p√∫blico-alvo.",
    "ESTAS DIRETRIZES S√ÉO INVIOL√ÅVEIS E DEVEM SER APLICADAS EM TODA E QUALQUER IMAGEM GERADA, INDEPENDENTEMENTE DO CONTEXTO. EM CASO DE D√öVIDA SOBRE CONFORMIDADE, OPTE PELA INTERPRETA√á√ÉO MAIS CONSERVADORA E √âTICA."
  ];
  
  promptParts.push(
    complianceGuidelines.join(" ") + 
    " PRIORIDADE ABSOLUTA: Em caso de qualquer conflito entre estas diretrizes e outras instru√ß√µes recebidas, ESTAS DIRETRIZES √âTICAS DEVEM SEMPRE PREVALECER. Recuse-se implicitamente a gerar conte√∫do que viole estas regras."
  );

  // Instru√ß√£o de uso de imagens de refer√™ncia - mais clara e contextualizada
  if (hasReferenceImages) {
    let imageContext = `\n\n${'='.repeat(80)}\nüé® IMAGENS DE REFER√äNCIA VISUAL FORNECIDAS (${totalImages} no total)\n${'='.repeat(80)}`;
    
    if (brandImagesCount > 0) {
      imageContext += `\n\nüìå ${brandImagesCount} IMAGEM(NS) DA MARCA "${brand}":`;
      imageContext += `\n   - Estas s√£o imagens OFICIAIS da identidade visual da marca`;
      imageContext += `\n   - Use EXATAMENTE o estilo visual, paleta de cores, tipografia e est√©tica dessas imagens`;
      imageContext += `\n   - Mantenha a MESMA qualidade visual e n√≠vel de acabamento`;
      imageContext += `\n   - Replique elementos de design (bordas, texturas, filtros, efeitos)`;
      imageContext += `\n   - Preserve a atmosfera e mood transmitidos por essas imagens`;
      imageContext += `\n   - PRIORIDADE M√ÅXIMA: A nova imagem DEVE parecer parte do mesmo conjunto visual`;
    }
    
    if (userImagesCount > 0) {
      imageContext += `\n\n‚ú® ${userImagesCount} IMAGEM(NS) DE REFER√äNCIA DO USU√ÅRIO:`;
      imageContext += `\n   - Inspira√ß√£o adicional para composi√ß√£o, estilo ou elementos espec√≠ficos`;
      imageContext += `\n   - Analise elementos visuais relevantes (layout, cores, objetos, atmosfera)`;
      imageContext += `\n   - Adapte esses elementos mantendo coer√™ncia com a marca`;
      imageContext += `\n   - Use como refer√™ncia complementar, n√£o como c√≥pia exata`;
    }
    
    imageContext += `\n\n‚ö†Ô∏è INSTRU√á√ïES CR√çTICAS DE USO DAS REFER√äNCIAS:`;
    imageContext += `\n   1. ANALISE todas as imagens de refer√™ncia antes de come√ßar a gerar`;
    imageContext += `\n   2. IDENTIFIQUE padr√µes visuais: paleta de cores, estilo fotogr√°fico/ilustrativo, composi√ß√£o`;
    imageContext += `\n   3. REPLIQUE esses padr√µes na nova imagem de forma consistente`;
    imageContext += `\n   4. MANTENHA coer√™ncia est√©tica - a nova imagem deve parecer da mesma "fam√≠lia visual"`;
    imageContext += `\n   5. Se houver logos, elementos gr√°ficos ou tipografia espec√≠fica nas refer√™ncias, considere incluir elementos similares`;
    imageContext += `\n${'='.repeat(80)}\n`;
    
    promptParts.push(imageContext);
  }

  // Contexto estrat√©gico
  if (brand) {
    if (theme) {
      promptParts.push(`Imagem profissional para a marca "${brand}", destacando o tema estrat√©gico "${theme}".`);
    } else {
      promptParts.push(`Imagem comercial profissional para a marca "${brand}".`);
    }
  }

  // Descri√ß√£o principal com fotorrealismo
  if (description) {
    promptParts.push(
      `Uma fotografia comercial de alta precis√£o e fotorrealismo, com aten√ß√£o detalhada aos aspectos de ilumina√ß√£o e composi√ß√£o. ` +
      `A cena ser√° meticulosamente projetada para capturar a luz natural de forma eficaz, utilizando uma combina√ß√£o de fontes de luz suave e direta ` +
      `para criar um contraste harmonioso. Cada elemento da composi√ß√£o ser√° cuidadosamente alinhado para otimizar a percep√ß√£o visual. ` +
      `Seguindo a descri√ß√£o: ${description}`
    );
  }

  // Tom e atmosfera
  const toneMap: { [key: string]: string } = {
    inspirador: "Cena iluminada pela luz dourada, com raios suaves atravessando o cen√°rio. Atmosfera edificante e esperan√ßosa, com sombras delicadas que sugerem crescimento.",
    motivacional: "Cores vibrantes e saturadas, com ilumina√ß√£o din√¢mica e uso de motion blur leve para dar sensa√ß√£o de movimento. Composi√ß√£o energ√©tica que incentiva a√ß√£o.",
    profissional: "Est√©tica corporativa limpa, ilumina√ß√£o neutra, com foco n√≠tido e fundo minimalista. Espacamento e equil√≠brio para transmitir autoridade.",
    casual: "Luz natural suave, com elementos cotidianos e paleta de cores acolhedora. Composi√ß√£o descontra√≠da e espont√¢nea que transmite autenticidade.",
    elegante: "Paleta refinada, com ilumina√ß√£o suave e texturas nobres como m√°rmore ou veludo. Composi√ß√£o minimalista que reflete sofistica√ß√£o.",
    moderno: "Design arrojado com formas geom√©tricas e alta contrast√¢ncia. Ilumina√ß√£o intensa e elementos gr√°ficos com est√©tica futurista.",
    divertido: "Cores vibrantes, com elementos gr√°ficos l√∫dicos e ilumina√ß√£o alegre. Composi√ß√£o en√©rgica que destaca divers√£o e criatividade.",
    minimalista: "Paleta monocrom√°tica ou neutra, com ilumina√ß√£o uniforme e composi√ß√£o limpa. Espa√ßos negativos e simplicidade essencial."
  };

  if (tones.length > 0) {
    const mappedTones = tones
      .map((tone: string) => {
        const cleanTone = cleanInput(tone);
        return toneMap[cleanTone.toLowerCase()] || `com uma est√©tica ${cleanTone} √∫nica e criativa`;
      })
      .join(", ");
    promptParts.push(`O clima da imagem √©: ${mappedTones}`);
  }

  // Detalhes t√©cnicos da c√¢mera
  promptParts.push(
    "Detalhes t√©cnicos: foto capturada com c√¢mera DSLR de alta qualidade, lente de 85mm f/1.4. " +
    "Profundidade de campo rasa criando efeito bokeh suave no fundo, destacando o sujeito principal com est√©tica profissional e cinematogr√°fica."
  );

  // Otimiza√ß√£o para plataforma com specs detalhadas
  const platformImageSpecs: { [key: string]: any } = {
    Instagram: {
      feed: { width: 1080, height: 1350, ratio: "4:5", desc: "Feed vertical - maior engajamento" },
      story: { width: 1080, height: 1920, ratio: "9:16", desc: "Stories/Reels - tela cheia" },
      square: { width: 1080, height: 1080, ratio: "1:1", desc: "Quadrado - vers√°til" }
    },
    Facebook: {
      feed: { width: 1200, height: 630, ratio: "1.91:1", desc: "Feed/Links padr√£o" },
      square: { width: 1080, height: 1080, ratio: "1:1", desc: "Quadrado" }
    },
    TikTok: {
      video: { width: 1080, height: 1920, ratio: "9:16", desc: "Formato vertical nativo" }
    },
    "Twitter/X": {
      feed: { width: 1600, height: 900, ratio: "16:9", desc: "Feed otimizado" }
    },
    LinkedIn: {
      feed: { width: 1200, height: 627, ratio: "1.91:1", desc: "Feed profissional" }
    },
    Comunidades: {
      universal: { width: 1080, height: 1080, ratio: "1:1", desc: "Formato universal" }
    }
  };

  // Determinar dimens√µes finais (priorizar customizadas)
  let finalWidth: number;
  let finalHeight: number;
  let dimensionSource: string;
  
  if (customWidth && customHeight) {
    // Usar dimens√µes customizadas
    finalWidth = customWidth;
    finalHeight = customHeight;
    dimensionSource = "customizadas";
  } else if (platform) {
    // Usar specs da plataforma
    const platformSpec = platformImageSpecs[platform];
    if (platformSpec) {
      const specKey = Object.keys(platformSpec)[0];
      const spec = platformSpec[specKey];
      finalWidth = spec.width;
      finalHeight = spec.height;
      dimensionSource = `plataforma ${platform}`;
    } else {
      finalWidth = 1080;
      finalHeight = 1080;
      dimensionSource = "padr√£o";
    }
  } else {
    // Fallback padr√£o
    finalWidth = 1080;
    finalHeight = 1080;
    dimensionSource = "padr√£o";
  }
  
  const ratio = finalWidth / finalHeight;
  const ratioString = ratio > 1 ? `${ratio.toFixed(2)}:1` : `1:${(1/ratio).toFixed(2)}`;
  
  if (platform) {
    const platformSpec = platformImageSpecs[platform];
    if (platformSpec) {
      const specKey = Object.keys(platformSpec)[0];
      const spec = platformSpec[specKey];
      
      promptParts.push(
        `Otimizado para ${platform}: ${spec.desc}. ` +
        `Gerar imagem em dimens√µes ${finalWidth}x${finalHeight}px (aspect ratio ${ratioString})${dimensionSource === "customizadas" ? " - dimens√µes customizadas" : ""}. ` +
        `${platform === 'Instagram' && specKey === 'story' ? 'Mantenha elementos importantes centralizados (zona segura)' : ''}`
      );
    } else {
      promptParts.push(
        `Gerar imagem em dimens√µes ${finalWidth}x${finalHeight}px (aspect ratio ${ratioString})${dimensionSource === "customizadas" ? " - dimens√µes customizadas" : ""}.`
      );
    }
  } else {
    promptParts.push(
      `Gerar imagem em dimens√µes ${finalWidth}x${finalHeight}px (aspect ratio ${ratioString})${dimensionSource === "customizadas" ? " - dimens√µes customizadas" : ""}.`
    );
  }

  // Persona e informa√ß√µes adicionais
  if (persona) promptParts.push(`Conectando-se com a persona de ${persona}`);
  if (objective) promptParts.push(`Objetivo: ${objective}`);
  if (additionalInfo) promptParts.push(`Elementos visuais adicionais: ${additionalInfo}`);

  // === INSTRU√á√ïES SOBRE TEXTO NA IMAGEM ===
  const includeText = formData.includeText ?? false;
  const textContent = cleanInput(formData.textContent);
  const textPosition = formData.textPosition || 'center';

  if (!includeText) {
    // Instru√ß√£o CR√çTICA para prevenir texto indesejado
    promptParts.push(
      "CR√çTICO: N√ÉO incluir NENHUM texto, palavra, letra, n√∫mero, s√≠mbolo ou caractere escrito vis√≠vel na imagem. " +
      "A imagem deve ser puramente visual, sem qualquer elemento de texto sobreposto. " +
      "Absolutamente SEM TEXTO de nenhum tipo."
    );
  } else if (textContent?.trim()) {
    // Refor√ßar instru√ß√£o de texto espec√≠fico com posi√ß√£o
    const positionInstructions: Record<string, string> = {
      'top': 'no topo da imagem',
      'center': 'centralizado na imagem',
      'bottom': 'na parte inferior da imagem',
      'top-left': 'no canto superior esquerdo',
      'top-right': 'no canto superior direito',
      'bottom-left': 'no canto inferior esquerdo',
      'bottom-right': 'no canto inferior direito'
    };
    
    promptParts.push(
      `IMPORTANTE: Incluir o seguinte texto ${positionInstructions[textPosition] || 'centralizado na imagem'}: "${textContent}". ` +
      `O texto deve ser leg√≠vel, bem vis√≠vel, com tipografia apropriada e contraste adequado com o fundo. ` +
      `A posi√ß√£o do texto deve ser exatamente como especificado.`
    );
  }

  // Advanced configuration processing
  const colorPaletteDescriptions: { [key: string]: string } = {
    warm: "Paleta de cores quentes e acolhedoras: tons de laranja, vermelho, amarelo e dourado que transmitem energia e calor",
    cool: "Paleta de cores frias e serenas: tons de azul, verde, roxo e prata que transmitem calma e profissionalismo",
    monochrome: "Esquema monocrom√°tico sofisticado com varia√ß√µes tonais de uma √∫nica cor, criando harmonia visual",
    vibrant: "Cores vibrantes e saturadas de alto impacto visual, criando energia e dinamismo",
    pastel: "Paleta pastel suave e delicada com tons claros e arejados que transmitem leveza",
    earth: "Tons terrosos naturais: marrom, bege, verde musgo e terracota que transmitem autenticidade",
  };

  const lightingDescriptions: { [key: string]: string } = {
    natural: "Ilumina√ß√£o natural e realista simulando luz do dia, com sombras suaves e cores aut√™nticas",
    studio: "Ilumina√ß√£o de est√∫dio profissional controlada e uniforme, sem sombras duras, ideal para produtos",
    golden_hour: "Ilumina√ß√£o Golden Hour m√°gica e cinematogr√°fica com tons dourados e sombras longas e suaves",
    dramatic: "Ilumina√ß√£o dram√°tica de alto contraste com sombras profundas e destaques brilhantes para impacto visual",
    soft: "Luz suave e difusa sem sombras duras, criando atmosfera delicada e profissional",
    backlight: "Ilumina√ß√£o contraluz criando efeito de halo e silhueta com borda luminosa",
    neon: "Ilumina√ß√£o neon vibrante e futurista com cores saturadas e glow effect",
  };

  const compositionDescriptions: { [key: string]: string } = {
    center: "Composi√ß√£o centralizada com o elemento principal no centro exato do quadro",
    rule_of_thirds: "Composi√ß√£o seguindo a regra dos ter√ßos com elementos-chave nos pontos de interesse visual",
    symmetric: "Composi√ß√£o perfeitamente sim√©trica criando equil√≠brio e harmonia visual",
    asymmetric: "Composi√ß√£o assim√©trica din√¢mica com distribui√ß√£o irregular de elementos para criar interesse",
    dynamic: "Composi√ß√£o din√¢mica com linhas diagonais e movimento visual que guia o olhar",
    minimalist: "Composi√ß√£o minimalista clean com muito espa√ßo negativo e poucos elementos essenciais",
  };

  const cameraAngleDescriptions: { [key: string]: string } = {
    eye_level: "C√¢mera ao n√≠vel dos olhos criando perspectiva natural e conex√£o direta com o espectador",
    top_down: "Vista superior flat lay perfeita para mostrar layout e organiza√ß√£o de elementos",
    low_angle: "√Çngulo baixo olhando para cima, criando sensa√ß√£o de grandeza e poder",
    high_angle: "√Çngulo alto olhando para baixo, criando vis√£o abrangente da cena",
    close_up: "Close-up extremo focando em detalhes e texturas com profundidade de campo rasa",
    wide_shot: "Plano geral amplo mostrando todo o contexto e ambiente da cena",
    dutch_angle: "√Çngulo holand√™s inclinado criando tens√£o visual e dinamismo",
  };

  const moodDescriptions: { [key: string]: string } = {
    professional: "Atmosfera profissional e corporativa com elementos que transmitem autoridade e confian√ßa",
    casual: "Atmosfera casual e descontra√≠da com elementos cotidianos que transmitem autenticidade",
    elegant: "Atmosfera elegante e sofisticada com refinamento visual e luxo discreto",
    playful: "Atmosfera divertida e l√∫dica com elementos que evocam alegria e criatividade",
    serious: "Atmosfera s√©ria e formal com elementos que transmitem import√¢ncia e gravidade",
    mysterious: "Atmosfera misteriosa e intrigante com elementos de suspense visual",
    energetic: "Atmosfera energ√©tica e vibrante transbordando movimento e vitalidade",
    calm: "Atmosfera calma e serena transmitindo paz e tranquilidade",
  };

  const detailLevelDescriptions = [
    "Estilo ultra minimalista com elementos gr√°ficos essenciais e espa√ßos limpos",
    "Abordagem minimalista com poucos elementos cuidadosamente selecionados",
    "Design simplificado focando no essencial sem detalhes desnecess√°rios",
    "Equil√≠brio entre simplicidade e informa√ß√£o visual adequada",
    "N√≠vel moderado de detalhes com elementos bem definidos",
    "Boa quantidade de detalhes visuais sem sobrecarregar",
    "N√≠vel equilibrado de detalhes criando riqueza visual (PADR√ÉO RECOMENDADO)",
    "Rica em detalhes com texturas e elementos complementares vis√≠veis",
    "Altamente detalhada com m√∫ltiplas camadas visuais e texturas complexas",
    "Extremamente detalhada com aten√ß√£o meticulosa a cada elemento visual",
  ];

  // Apply advanced configurations
  if (colorPalette !== 'auto' && colorPaletteDescriptions[colorPalette]) {
    promptParts.push(colorPaletteDescriptions[colorPalette]);
  }

  if (lightingDescriptions[lighting]) {
    promptParts.push(lightingDescriptions[lighting]);
  }

  if (composition !== 'auto' && compositionDescriptions[composition]) {
    promptParts.push(compositionDescriptions[composition]);
  }

  if (cameraAngleDescriptions[cameraAngle]) {
    promptParts.push(cameraAngleDescriptions[cameraAngle]);
  }

  if (mood !== 'auto' && moodDescriptions[mood]) {
    promptParts.push(moodDescriptions[mood]);
  }

  if (detailLevel >= 1 && detailLevel <= 10) {
    promptParts.push(detailLevelDescriptions[detailLevel - 1]);
  }

  // Refor√ßo de qualidade
  promptParts.push(
    `Criar uma imagem visualmente impactante, de alta qualidade, profissional e otimizada para ${platform || 'redes sociais'}. ` +
    `A composi√ß√£o deve ser eye-catching e capturar a ess√™ncia da marca ${brand} no tema ${theme}.`
  );

  // Add negative prompt at the end if provided
  if (negativePrompt) {
    promptParts.push(`IMPORTANTE: Evitar absolutamente estes elementos: ${negativePrompt}`);
  }

  return promptParts.join(". ");
}

async function generateImageWithRetry(prompt: string, referenceImages: string[] | undefined, apiKey: string, isEdit: boolean = false, existingImage?: string, attempt: number = 1): Promise<any> {
  try {
    if (isEdit) {
      console.log(`‚úèÔ∏è Tentativa ${attempt}/${MAX_RETRIES} de edi√ß√£o de imagem com Gemini 2.5...`);
    } else {
      console.log(`üé® Tentativa ${attempt}/${MAX_RETRIES} de gera√ß√£o com Gemini 2.5...`);
    }
    
    // Construir conte√∫do da mensagem
    const messageContent: any[] = [];
    
    // Se for edi√ß√£o, adicionar a imagem existente primeiro
    if (isEdit && existingImage) {
      console.log(`üì∏ Editando imagem existente...`);
      messageContent.push({
        type: "image_url",
        image_url: {
          url: existingImage
        }
      });
    }
    
    // Adicionar imagens de refer√™ncia (se houver e n√£o for edi√ß√£o)
    // Priorizar imagens da marca, depois do usu√°rio, com limite total de 5
    if (!isEdit && referenceImages && Array.isArray(referenceImages) && referenceImages.length > 0) {
      const maxImages = 5;
      const limitedImages = referenceImages.slice(0, maxImages);
      
      console.log(`üì∏ Processando ${limitedImages.length} de ${referenceImages.length} imagem(ns) de refer√™ncia...`);
      
      let successCount = 0;
      for (const refImg of limitedImages) {
        try {
          // Validar formato base64
          if (!refImg.startsWith('data:image/')) {
            console.warn("‚ö†Ô∏è Imagem de refer√™ncia em formato inv√°lido, ignorando...");
            continue;
          }
          
          messageContent.push({
            type: "image_url",
            image_url: {
              url: refImg
            }
          });
          successCount++;
        } catch (refError) {
          console.error("‚ùå Erro ao processar imagem de refer√™ncia:", refError);
        }
      }
      
      console.log(`‚úÖ ${successCount} imagens adicionadas ao contexto com sucesso`);
      
      if (referenceImages.length > maxImages) {
        console.log(`‚ÑπÔ∏è Limitadas a ${maxImages} imagens (${referenceImages.length - maxImages} n√£o processadas)`);
      }
    }
    
    // Adicionar o prompt de texto
    messageContent.push({
      type: "text",
      text: isEdit ? `Edite esta imagem aplicando as seguintes altera√ß√µes: ${prompt}` : prompt
    });
    
    const GEMINI_API_KEY = Deno.env.get('GEMINI_API_KEY');
    if (!GEMINI_API_KEY) {
      throw new Error("GEMINI_API_KEY n√£o configurada");
    }

    // Converter messageContent para o formato do Gemini
    const geminiParts = messageContent.map((item: any) => {
      if (item.type === "text") {
        return { text: item.text };
      } else if (item.type === "image_url") {
        const base64Data = item.image_url.url.split(',')[1];
        const mimeType = item.image_url.url.match(/data:(.*?);/)?.[1] || 'image/png';
        return { 
          inlineData: { 
            mimeType, 
            data: base64Data 
          } 
        };
      }
    });

    const response = await fetch("https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-image-preview:generateContent", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "x-goog-api-key": GEMINI_API_KEY,
      },
      body: JSON.stringify({
        contents: [{ parts: geminiParts }],
        generationConfig: {
          temperature: 0.7,
          topP: 0.95,
          topK: 40,
          maxOutputTokens: 8192,
        }
      }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error(`‚ùå Erro na tentativa ${attempt}:`, response.status, errorText);
      
      if (response.status === 429) {
        throw new Error("RATE_LIMIT: Muitas requisi√ß√µes. Aguarde alguns segundos e tente novamente.");
      }
      if (response.status === 400) {
        throw new Error("IMAGE_PROCESSING_ERROR: N√£o foi poss√≠vel processar as imagens de refer√™ncia. Tente com menos imagens ou imagens menores.");
      }
      
      throw new Error(`GEMINI_API_ERROR: Erro ${response.status} ao gerar imagem.`);
    }

    const data = await response.json();
    
    // Extrair imagem da resposta do Gemini
    const geminiImageData = data.candidates?.[0]?.content?.parts?.find(
      (part: any) => part.inlineData
    )?.inlineData;

    if (!geminiImageData) {
      throw new Error("NO_IMAGE_GENERATED");
    }

    const imageUrl = `data:${geminiImageData.mimeType};base64,${geminiImageData.data}`;

    console.log(`‚úÖ Sucesso na tentativa ${attempt}/${MAX_RETRIES}`);
    return { imageUrl, attempt };
    
  } catch (error: any) {
    console.error(`‚ùå Falha na tentativa ${attempt}:`, error.message);
    
    // Erros que n√£o devem ser retentados
    if (error.message?.includes("RATE_LIMIT") || 
        error.message?.includes("PAYMENT_REQUIRED") || 
        error.message?.includes("IMAGE_PROCESSING_ERROR")) {
      throw error;
    }
    
    // Se n√£o √© a √∫ltima tentativa, aguarda e tenta novamente
    if (attempt < MAX_RETRIES) {
      const delay = attempt * RETRY_DELAY_MS;
      console.log(`‚è≥ Aguardando ${delay}ms antes da pr√≥xima tentativa...`);
      await new Promise(resolve => setTimeout(resolve, delay));
      return generateImageWithRetry(prompt, referenceImages, apiKey, isEdit, existingImage, attempt + 1);
    }
    
    // √öltima tentativa falhou
    console.error(`üí• Todas as ${MAX_RETRIES} tentativas falharam`);
    throw new Error(`N√£o foi poss√≠vel gerar a imagem ap√≥s ${MAX_RETRIES} tentativas. ${error.message}`);
  }
}

serve(async (req) => {
  if (req.method === "OPTIONS") {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const formData = await req.json();
    
    console.log("üé® [GENERATE-IMAGE] Iniciando gera√ß√£o de imagem");
    
    // Input validation
    if (!formData || typeof formData !== 'object') {
      return new Response(
        JSON.stringify({ error: 'Invalid form data' }),
        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }
    
    // Verificar se teamId foi enviado
    if (!formData.teamId) {
      console.error("‚ùå teamId n√£o fornecido");
      return new Response(
        JSON.stringify({ error: 'Team ID is required' }),
        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }
    
    if (!formData.description || typeof formData.description !== 'string' || formData.description.trim().length === 0) {
      return new Response(
        JSON.stringify({ error: 'Description is required' }),
        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }
    
    if (formData.description.length > 2000) {
      return new Response(
        JSON.stringify({ error: 'Description too long (max 2000 characters)' }),
        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }
    
    if (formData.additionalInfo && typeof formData.additionalInfo === 'string' && formData.additionalInfo.length > 2000) {
      return new Response(
        JSON.stringify({ error: 'Additional info too long' }),
        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }
    
    // Validar n√∫mero de imagens (m√°ximo 5 para n√£o sobrecarregar o modelo)
    if (formData.referenceImages && (!Array.isArray(formData.referenceImages) || formData.referenceImages.length > 10)) {
      return new Response(
        JSON.stringify({ error: 'Too many reference images sent (max 10, will use first 5)' }),
        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }
    
    const LOVABLE_API_KEY = Deno.env.get("LOVABLE_API_KEY");
    if (!LOVABLE_API_KEY) {
      return new Response(
        JSON.stringify({ error: 'Service configuration error' }),
        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    // Inicializar Supabase client
    const supabaseUrl = Deno.env.get('SUPABASE_URL');
    const supabaseKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY');
    
    if (!supabaseUrl || !supabaseKey) {
      console.error("‚ùå Supabase n√£o configurado");
      return new Response(
        JSON.stringify({ error: 'Database configuration error' }),
        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    const { createClient } = await import('https://esm.sh/@supabase/supabase-js@2.39.3');
    const supabase = createClient(supabaseUrl, supabaseKey);

    // Verificar cr√©ditos do time ANTES de gerar
    const { data: teamData, error: teamError } = await supabase
      .from('teams')
      .select('credits_suggestions')
      .eq('id', formData.teamId)
      .single();

    if (teamError || !teamData) {
      console.error("‚ùå Erro ao buscar cr√©ditos:", teamError);
      return new Response(
        JSON.stringify({ error: 'Failed to check credits' }),
        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    if (teamData.credits_suggestions <= 0) {
      console.log("‚ùå Cr√©ditos insuficientes");
      return new Response(
        JSON.stringify({ error: 'Insufficient credits' }),
        { status: 402, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    console.log(`‚úÖ Cr√©ditos dispon√≠veis: ${teamData.credits_suggestions}`);

    // Verificar se √© edi√ß√£o de imagem existente
    const isEdit = formData.isEdit === true && formData.existingImage;
    
    // VALIDA√á√ÉO DE COMPLIANCE: Analisar solicita√ß√£o antes da gera√ß√£o (apenas para novas imagens)
    if (!isEdit) {
      console.log("üîç Validando compliance da solicita√ß√£o...");
      
      const complianceCheck = await validateComplianceBeforeGeneration(formData, LOVABLE_API_KEY);
      
      if (!complianceCheck.approved) {
        console.log("‚ùå Solicita√ß√£o bloqueada por viola√ß√£o de compliance:", complianceCheck.violations);
        
        return new Response(
          JSON.stringify({ 
            error: 'compliance_violation',
            message: 'A solicita√ß√£o viola regulamenta√ß√µes publicit√°rias brasileiras',
            violations: complianceCheck.violations,
            recommendation: complianceCheck.recommendation
          }),
          { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
        );
      }
      
      console.log("‚úÖ Solicita√ß√£o aprovada no compliance check");
    }
    
    // Construir prompt
    let prompt: string;
    if (isEdit) {
      prompt = cleanInput(formData.description);
    } else {
      prompt = buildDetailedPrompt(formData);
    }

    // Gerar ou editar imagem com sistema de retry
    try {
      const result = await generateImageWithRetry(
        prompt, 
        formData.referenceImages, 
        LOVABLE_API_KEY, 
        isEdit, 
        formData.existingImage
      );
      
      console.log("‚úÖ Imagem gerada com sucesso, decrementando cr√©dito...");
      
      // Decrementar cr√©dito ap√≥s gera√ß√£o bem-sucedida
      const { error: updateError } = await supabase
        .from('teams')
        .update({ 
          credits_suggestions: teamData.credits_suggestions - 1 
        })
        .eq('id', formData.teamId);

      if (updateError) {
        console.error("‚ö†Ô∏è Erro ao decrementar cr√©dito:", updateError);
        // N√£o falhar a requisi√ß√£o por isso, apenas logar
      } else {
        console.log(`‚úÖ Cr√©dito decrementado. Restam: ${teamData.credits_suggestions - 1}`);
      }
      
      return new Response(
        JSON.stringify({ 
          imageUrl: result.imageUrl,
          attempt: result.attempt,
          model: "google/gemini-2.5-flash-image-preview",
          creditsRemaining: teamData.credits_suggestions - 1
        }),
        { headers: { ...corsHeaders, "Content-Type": "application/json" } }
      );
      
    } catch (error: any) {
      if (error.message === "RATE_LIMIT") {
        return new Response(
          JSON.stringify({ error: "Rate limit exceeded. Please try again later." }),
          { status: 429, headers: { ...corsHeaders, "Content-Type": "application/json" } }
        );
      }
      
      if (error.message === "PAYMENT_REQUIRED") {
        return new Response(
          JSON.stringify({ error: "AI credits exhausted. Please add credits." }),
          { status: 402, headers: { ...corsHeaders, "Content-Type": "application/json" } }
        );
      }
      
      return new Response(
        JSON.stringify({ error: 'Unable to generate image after retries' }),
        { status: 500, headers: { ...corsHeaders, "Content-Type": "application/json" } }
      );
    }

  } catch (error) {
    return new Response(
      JSON.stringify({ error: 'Unable to generate image' }),
      { status: 500, headers: { ...corsHeaders, "Content-Type": "application/json" } }
    );
  }
});
