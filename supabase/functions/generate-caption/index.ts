import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
};

function cleanInput(text: string | string[] | undefined | null): string {
  if (!text) return "";
  if (Array.isArray(text)) {
    return text.map(item => cleanInput(item)).join(", ");
  }
  const textStr = String(text);
  let cleanedText = textStr.replace(/[<>{}[\]"'`]/g, "");
  cleanedText = cleanedText.replace(/\s+/g, " ").trim();
  return cleanedText;
}

function buildCaptionPrompt(formData: any): string {
  const cleanedTones = Array.isArray(formData.tone)
    ? formData.tone.map(cleanInput).join(", ")
    : cleanInput(formData.tone);

  return `
# CONTEXTO ESTRAT√âGICO COMPLETO
- **Marca/Empresa**: ${cleanInput(formData.brand)}
- **Tema Central**: ${cleanInput(formData.theme)}
- **Plataforma de Publica√ß√£o**: ${cleanInput(formData.platform)}
- **Objetivo Estrat√©gico**: ${cleanInput(formData.objective)}
- **Descri√ß√£o Visual da Imagem Gerada**: ${cleanInput(formData.description)}
- **P√∫blico-Alvo**: ${cleanInput(formData.audience) || "P√∫blico geral"}
- **Persona Espec√≠fica**: ${cleanInput(formData.persona) || "N√£o especificada"}
- **Tom de Voz/Comunica√ß√£o**: ${cleanedTones || "N√£o especificado"}
- **Informa√ß√µes Complementares**: ${cleanInput(formData.additionalInfo) || "N√£o informado"}

# SUA MISS√ÉO COMO COPYWRITER MASTER
Voc√™ √© um copywriter especialista em redes sociais com mais de 15 anos de experi√™ncia criando conte√∫dos virais e de alto engajamento para marcas globais. Sua tarefa √© criar uma legenda COMPLETA, ELABORADA e EXTREMAMENTE ENVOLVENTE para ${cleanInput(formData.platform)}.

## IMPORT√ÇNCIA CR√çTICA:
- A legenda DEVE ser LONGA e DETALHADA (m√≠nimo 1.200 caracteres, ideal 1.800-2.200)
- O usu√°rio precisa de MUITO CONTE√öDO para escolher o que usar
- Cada se√ß√£o deve ser RICA em detalhes, storytelling e valor
- A legenda deve estar completamente ALINHADA com a identidade da marca "${cleanInput(formData.brand)}" e o tema "${cleanInput(formData.theme)}"

# ESTRUTURA OBRIGAT√ìRIA DA LEGENDA (SIGA RIGOROSAMENTE)

## 1. ABERTURA IMPACTANTE E MAGN√âTICA (2-3 linhas)
- Hook PODEROSO que desperta curiosidade, emo√ß√£o ou surpresa
- Conecte com a dor/desejo do p√∫blico-alvo
- Use pergunta provocativa OU declara√ß√£o ousada OU dado impressionante
- DEVE relacionar diretamente com a imagem gerada e o tema da marca
- Emojis estrat√©gicos (1-2) para chamar aten√ß√£o visual

## 2. DESENVOLVIMENTO NARRATIVO RICO (4-6 par√°grafos extensos)

### Par√°grafo 1 - Contexto e Conex√£o Emocional:
- Estabele√ßa o cen√°rio relacionado ao tema "${cleanInput(formData.theme)}"
- Crie identifica√ß√£o com o p√∫blico atrav√©s de situa√ß√µes reconhec√≠veis
- Use storytelling para envolver emocionalmente
- Mostre compreens√£o profunda das necessidades da persona

### Par√°grafo 2 - Problema/Desafio/Insight:
- Apresente um problema comum ou insight valioso
- Explique por que isso importa para o p√∫blico
- Use exemplos pr√°ticos e situa√ß√µes reais
- Mantenha relev√¢ncia com a marca "${cleanInput(formData.brand)}"

### Par√°grafo 3 - Solu√ß√£o/Transforma√ß√£o/Benef√≠cio:
- Apresente a solu√ß√£o ou transforma√ß√£o dispon√≠vel
- Detalhe os benef√≠cios espec√≠ficos e tang√≠veis
- Mostre o valor √∫nico da marca
- Use provas sociais sutis ou autoridade

### Par√°grafo 4 - Aprofundamento e Valor Adicional:
- Agregue insights adicionais ou dicas pr√°ticas
- Compartilhe conhecimento especializado
- Reforce a expertise da marca
- Mantenha o engajamento com informa√ß√µes valiosas

### Par√°grafo 5 - Conex√£o com Prop√≥sito (quando relevante):
- Conecte com valores maiores da marca
- Mostre impacto ou diferencial
- Humanize a marca atrav√©s de prop√≥sito
- Reforce identidade e posicionamento

## 3. PR√â-CALL-TO-ACTION - Gatilho Emocional (1-2 linhas)
- Prepare o terreno para a a√ß√£o
- Use urg√™ncia, exclusividade ou curiosidade
- Reforce o benef√≠cio principal uma √∫ltima vez
- Emojis estrat√©gicos para chamar aten√ß√£o

## 4. CALL-TO-ACTION PODEROSO E ESPEC√çFICO (2-3 linhas)
- Comando CLARO e DIRETO
- Use verbos de a√ß√£o impactantes: "Descubra", "Experimente", "Transforme", "Acesse", "Conquiste"
- Inclua urg√™ncia ou escassez quando apropriado
- SEMPRE termine com pergunta para engajamento nos coment√°rios
- Emojis de a√ß√£o (üëâ, üî•, ‚ú®, üí¨)

## 5. ELEMENTOS INTERATIVOS FINAIS (2-3 linhas)
- Convite para compartilhar com algu√©m espec√≠fico
- Pedido de opini√£o ou experi√™ncia pessoal
- Incentivo para salvar o post
- Emojis que incentivem intera√ß√£o

# DIRETRIZES AVAN√áADAS DE LINGUAGEM

## Para Instagram/Facebook:
- M√≠nimo 1.500 caracteres, ideal 2.000-2.200
- Primeiro par√°grafo (hook) at√© 125 caracteres para aparecer antes do "ver mais"
- Use quebras de linha estrat√©gicas (\\n\\n) a cada 2-3 linhas para facilitar leitura
- Linguagem conversacional, pr√≥xima e aut√™ntica
- Tom ${cleanedTones || "apropriado"} mantido durante toda a legenda
- Variedade de emojis (12-18 no total), mas estrategicamente posicionados

## Para LinkedIn:
- M√≠nimo 1.800 caracteres, ideal 2.500-3.000
- Tom profissional mas humano e acess√≠vel
- Inclua dados, estat√≠sticas ou insights de mercado
- Use storytelling corporativo
- Menos emojis (6-10 no total), mais formais
- Estrutura mais formal com par√°grafos bem definidos

## Para TikTok/Twitter/X:
- M√≠nimo 1.200 caracteres, ideal 1.800-2.200
- Linguagem jovem, din√¢mica e atual
- Refer√™ncias culturais quando apropriado
- Tom descontra√≠do e aut√™ntico
- Emojis abundantes (15-20) e energia vibrante
- Quebras de linha frequentes para dinamismo

# INTEGRA√á√ÉO PROFUNDA COM A MARCA

## Elementos Obrigat√≥rios:
- Mencione a marca "${cleanInput(formData.brand)}" naturalmente no texto (2-3 vezes)
- Reflita os valores e personalidade da marca em cada frase
- Use vocabul√°rio e express√µes alinhados com o DNA da marca
- Mantenha consist√™ncia com o tema "${cleanInput(formData.theme)}" durante toda a narrativa
- Incorpore o objetivo "${cleanInput(formData.objective)}" de forma org√¢nica

## Tom de Voz Consistente:
- ${cleanedTones || "Tom apropriado"} presente em toda a comunica√ß√£o
- Vocabul√°rio espec√≠fico do segmento da marca
- Personalidade √∫nica e reconhec√≠vel
- Autenticidade e coer√™ncia em cada palavra

# REGRAS T√âCNICAS CR√çTICAS DE SA√çDA

‚ö†Ô∏è ATEN√á√ÉO M√ÅXIMA ‚ö†Ô∏è
- Responda EXCLUSIVAMENTE em JSON v√°lido
- ZERO texto adicional, explica√ß√µes, coment√°rios ou markdown
- ZERO caracteres antes ou depois do JSON
- Estrutura EXATA e OBRIGAT√ìRIA: {"title", "body", "hashtags"}

## ESPECIFICA√á√ïES T√âCNICAS R√çGIDAS:

### "title" (string):
- T√≠tulo magn√©tico de 50-70 caracteres
- Deve funcionar como headline completa
- Inclua emoji impactante (1-2)
- Desperte curiosidade m√°xima
- Conecte marca + tema de forma criativa

### "body" (string):
- Legenda COMPLETA com M√çNIMO 1.500 caracteres
- IDEAL: 1.800 a 2.200 caracteres (muito importante!)
- Rico em detalhes, storytelling e valor educacional
- M√∫ltiplas se√ß√µes com conte√∫do abundante
- 5-7 par√°grafos bem desenvolvidos
- Use '\\n\\n' para separar par√°grafos (importante para formata√ß√£o)
- Use '\\n' apenas para quebras simples dentro de um par√°grafo
- 12-20 emojis distribu√≠dos estrategicamente
- OBRIGAT√ìRIO: pelo menos 2 perguntas para engajamento
- OBRIGAT√ìRIO: CTA claro e forte no final
- Mencione a marca ${cleanInput(formData.brand)} pelo menos 2 vezes
- Desenvolva profundamente o tema ${cleanInput(formData.theme)}

### "hashtags" (array de strings):
- 10-15 hashtags estrat√©gicas (n√£o 8-12, mas mais!)
- MIX obrigat√≥rio: 40% nicho espec√≠fico + 40% m√©dio alcance + 20% populares
- Primeira hashtag SEMPRE da marca: #${cleanInput(formData.brand).toLowerCase().replace(/\s+/g, "")}
- Segunda hashtag SEMPRE do tema: #${cleanInput(formData.theme).toLowerCase().replace(/\s+/g, "")}
- Restantes relacionadas: setor, benef√≠cio, p√∫blico, emo√ß√£o, a√ß√£o
- SEM o s√≠mbolo # (apenas o texto)
- Todas em lowercase
- Sem espa√ßos ou caracteres especiais

## EXEMPLO DE FORMATA√á√ÉO DO BODY:
"üöÄ Primeira linha impactante que chama aten√ß√£o!\\n\\nVoc√™ j√° se perguntou sobre [tema]? Deixe eu te contar uma hist√≥ria...\\n\\n‚ú® Par√°grafo de desenvolvimento rico em detalhes, insights valiosos e storytelling envolvente que conecta emocionalmente com o p√∫blico. Continue desenvolvendo com informa√ß√µes pr√°ticas e relevantes.\\n\\nSegundo par√°grafo aprofundando ainda mais o tema, agregando valor, compartilhando conhecimento especializado e mantendo o engajamento com conte√∫do de qualidade excepcional.\\n\\nüí° Terceiro par√°grafo continuando..."

# VALIDA√á√ÉO FINAL ANTES DE GERAR:
‚úÖ Legenda tem M√çNIMO 1.500 caracteres? (conte!)
‚úÖ Pelo menos 5 par√°grafos bem desenvolvidos?
‚úÖ Marca mencionada 2-3 vezes naturalmente?
‚úÖ Tema desenvolvido profundamente?
‚úÖ Storytelling envolvente presente?
‚úÖ Valor educacional agregado?
‚úÖ 2+ perguntas para engajamento?
‚úÖ CTA claro e forte no final?
‚úÖ 10-15 hashtags estrat√©gicas?
‚úÖ JSON v√°lido sem nenhum texto extra?

Gere agora a legenda COMPLETA, ELABORADA e EXTENSA em formato JSON puro.
`;
}

serve(async (req) => {
  if (req.method === "OPTIONS") {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const formData = await req.json();
    const LOVABLE_API_KEY = Deno.env.get("LOVABLE_API_KEY");
    
    if (!LOVABLE_API_KEY) {
      throw new Error("LOVABLE_API_KEY is not configured");
    }

    const prompt = buildCaptionPrompt(formData);
    console.log("üìù Gerando legenda com Gemini 2.5...");

    const response = await fetch("https://ai.gateway.lovable.dev/v1/chat/completions", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${LOVABLE_API_KEY}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: "google/gemini-2.5-flash",
        messages: [{ role: "user", content: prompt }],
        temperature: 0.7,
      }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error("Erro na API:", response.status, errorText);
      throw new Error("Falha ao gerar legenda");
    }

    const data = await response.json();
    const content = data.choices?.[0]?.message?.content;

    if (!content) {
      throw new Error("Conte√∫do vazio retornado pela API");
    }

    // Tentar fazer parse do JSON
    let postContent;
    try {
      postContent = JSON.parse(content);
    } catch (parseError) {
      // Se falhar, criar fallback
      console.error("Erro ao fazer parse do JSON, usando fallback");
      postContent = {
        title: `${cleanInput(formData.brand)}: ${cleanInput(formData.theme)} üöÄ`,
        body: `üåü Confira este conte√∫do incr√≠vel sobre ${cleanInput(formData.theme)}!\n\n${cleanInput(formData.description)}\n\nüí° ${cleanInput(formData.objective)}\n\nO que voc√™ achou? Deixe seu coment√°rio! üëá`,
        hashtags: [
          cleanInput(formData.brand).toLowerCase().replace(/\s+/g, ""),
          cleanInput(formData.theme).toLowerCase().replace(/\s+/g, ""),
          "marketing",
          "conteudo",
          "digital"
        ]
      };
    }

    // Valida√ß√£o e corre√ß√£o das hashtags
    if (typeof postContent.hashtags === "string") {
      postContent.hashtags = postContent.hashtags
        .replace(/#/g, "")
        .split(/[\s,]+/)
        .filter(Boolean);
    }

    if (!Array.isArray(postContent.hashtags) || postContent.hashtags.length === 0) {
      postContent.hashtags = [
        cleanInput(formData.brand).toLowerCase().replace(/\s+/g, ""),
        cleanInput(formData.theme).toLowerCase().replace(/\s+/g, ""),
        "marketing"
      ];
    }

    postContent.hashtags = postContent.hashtags
      .map((tag: any) =>
        String(tag)
          .replace(/[^a-zA-Z0-9√°√©√≠√≥√∫√†√®√¨√≤√π√¢√™√Æ√¥√ª√£√µ√ß√Å√â√ç√ì√ö√Ä√à√å√í√ô√Ç√ä√é√î√õ√É√ï√á]/g, "")
          .toLowerCase()
      )
      .filter((tag: string) => tag.length > 0)
      .slice(0, 12);

    console.log("‚úÖ Legenda gerada com sucesso");

    return new Response(
      JSON.stringify(postContent),
      { headers: { ...corsHeaders, "Content-Type": "application/json" } }
    );

  } catch (error) {
    console.error("‚ùå Erro na fun√ß√£o generate-caption:", error);
    
    // Fallback completo
    const formData = await req.json().catch(() => ({}));
    const fallback = {
      title: `${cleanInput(formData.brand || "Marca")}: Novidades üöÄ`,
      body: `üåü Confira nosso novo conte√∫do!\n\n${cleanInput(formData.description || "Conte√∫do exclusivo para voc√™.")}\n\nüí° N√£o perca essa oportunidade!\n\nO que voc√™ achou? Comente abaixo! üëá`,
      hashtags: ["marketing", "conteudo", "digital", "novidades", "dicas"]
    };

    return new Response(
      JSON.stringify(fallback),
      { headers: { ...corsHeaders, "Content-Type": "application/json" } }
    );
  }
});
