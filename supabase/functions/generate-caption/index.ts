import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
};

function cleanInput(text: string | string[] | undefined | null): string {
  if (!text) return "";
  if (Array.isArray(text)) {
    return text.map(item => cleanInput(item)).join(", ");
  }
  const textStr = String(text);
  let cleanedText = textStr.replace(/[<>{}[\]"'`]/g, "");
  cleanedText = cleanedText.replace(/\s+/g, " ").trim();
  return cleanedText;
}

function buildCaptionPrompt(formData: any): string {
  const cleanedTones = Array.isArray(formData.tone)
    ? formData.tone.map(cleanInput).join(", ")
    : cleanInput(formData.tone);

  return `
# CONTEXTO ESTRAT√âGICO COMPLETO
- **Marca/Empresa**: ${cleanInput(formData.brand)}
- **Tema Central**: ${cleanInput(formData.theme)}
- **Plataforma de Publica√ß√£o**: ${cleanInput(formData.platform)}
- **Objetivo Estrat√©gico**: ${cleanInput(formData.objective)}
- **Descri√ß√£o Visual da Imagem Gerada**: ${cleanInput(formData.description)}
- **P√∫blico-Alvo**: ${cleanInput(formData.audience) || "P√∫blico geral"}
- **Persona Espec√≠fica**: ${cleanInput(formData.persona) || "N√£o especificada"}
- **Tom de Voz/Comunica√ß√£o**: ${cleanedTones || "N√£o especificado"}
- **Informa√ß√µes Complementares**: ${cleanInput(formData.additionalInfo) || "N√£o informado"}

# SUA MISS√ÉO COMO COPYWRITER MASTER
Voc√™ √© um copywriter especialista em redes sociais com mais de 15 anos de experi√™ncia criando conte√∫dos virais e de alto engajamento para marcas globais. Sua tarefa √© criar uma LEGENDA PRONTA PARA USO no post de ${cleanInput(formData.platform)} que acompanhar√° a imagem gerada.

## IMPORT√ÇNCIA CR√çTICA:
- Esta legenda ser√° usada DIRETAMENTE no post da rede social junto com a imagem
- A legenda DEVE ser COMPLETA e RICA (m√≠nimo 1.000 caracteres, ideal 1.500-1.800)
- O usu√°rio precisa de conte√∫do ABUNDANTE para ter op√ß√µes de edi√ß√£o
- A legenda deve estar completamente ALINHADA com a identidade da marca "${cleanInput(formData.brand)}" e o tema "${cleanInput(formData.theme)}"
- Cada par√°grafo deve funcionar perfeitamente com a imagem visual gerada

# ESTRUTURA OBRIGAT√ìRIA DA LEGENDA (4 PAR√ÅGRAFOS + CTA)

## 1. ABERTURA MAGN√âTICA (2-3 linhas)
- Hook PODEROSO que conecta com a imagem gerada
- Desperta curiosidade, emo√ß√£o ou surpresa imediata
- Relaciona diretamente com a descri√ß√£o visual: "${cleanInput(formData.description)}"
- Use pergunta provocativa OU declara√ß√£o ousada
- Emojis estrat√©gicos (1-2) para impacto visual

## 2. DESENVOLVIMENTO EM 4 PAR√ÅGRAFOS RICOS

### Par√°grafo 1 - Contexto e Identifica√ß√£o (3-4 linhas):
- Estabele√ßa conex√£o emocional com o tema "${cleanInput(formData.theme)}"
- Crie identifica√ß√£o com o p√∫blico atrav√©s de situa√ß√µes reconhec√≠veis
- Use storytelling que complementa a imagem
- Mostre compreens√£o das necessidades da persona

### Par√°grafo 2 - Valor e Insight (3-4 linhas):
- Apresente insight valioso ou problema comum
- Explique por que isso importa para o p√∫blico
- Use exemplos pr√°ticos relacionados ao objetivo: "${cleanInput(formData.objective)}"
- Mantenha relev√¢ncia com a marca "${cleanInput(formData.brand)}"

### Par√°grafo 3 - Solu√ß√£o e Benef√≠cios (3-4 linhas):
- Apresente transforma√ß√£o ou benef√≠cio dispon√≠vel
- Detalhe valor espec√≠fico e tang√≠vel
- Mostre diferencial √∫nico da marca
- Reforce expertise e autoridade

### Par√°grafo 4 - Aprofundamento e Conex√£o Final (3-4 linhas):
- Agregue dicas pr√°ticas ou conhecimento adicional
- Conecte com valores maiores da marca
- Humanize atrav√©s de prop√≥sito
- Prepare para a a√ß√£o final

## 3. CALL-TO-ACTION PODEROSO (2-3 linhas)
- Comando CLARO e DIRETO de a√ß√£o
- Use verbos impactantes: "Descubra", "Experimente", "Transforme", "Conquiste"
- SEMPRE termine com pergunta para engajamento nos coment√°rios
- Convite para salvar/compartilhar o post
- Emojis de a√ß√£o (üëâ, üî•, ‚ú®, üí¨)

# DIRETRIZES AVAN√áADAS DE LINGUAGEM

## Para Instagram/Facebook:
- M√≠nimo 1.200 caracteres, ideal 1.500-1.800
- Primeiro par√°grafo (hook) at√© 125 caracteres para aparecer antes do "ver mais"
- Use quebras de linha estrat√©gicas (\\n\\n) entre os 4 par√°grafos
- Linguagem conversacional, pr√≥xima e aut√™ntica
- Tom ${cleanedTones || "apropriado"} mantido durante toda a legenda
- Emojis estrat√©gicos (10-15 no total) distribu√≠dos naturalmente

## Para LinkedIn:
- M√≠nimo 1.400 caracteres, ideal 1.800-2.200
- Tom profissional mas humano e acess√≠vel
- Inclua dados, estat√≠sticas ou insights de mercado
- Use storytelling corporativo em 4 par√°grafos
- Menos emojis (6-10 no total), mais formais
- Estrutura profissional com par√°grafos bem definidos

## Para TikTok/Twitter/X:
- M√≠nimo 1.000 caracteres, ideal 1.500-1.800
- Linguagem jovem, din√¢mica e atual
- Refer√™ncias culturais quando apropriado
- Tom descontra√≠do e aut√™ntico em 4 par√°grafos
- Emojis abundantes (12-18) e energia vibrante
- Quebras de linha frequentes para dinamismo

# INTEGRA√á√ÉO PROFUNDA COM A MARCA

## Elementos Obrigat√≥rios:
- Mencione a marca "${cleanInput(formData.brand)}" naturalmente no texto (2-3 vezes)
- Reflita os valores e personalidade da marca em cada frase
- Use vocabul√°rio e express√µes alinhados com o DNA da marca
- Mantenha consist√™ncia com o tema "${cleanInput(formData.theme)}" durante toda a narrativa
- Incorpore o objetivo "${cleanInput(formData.objective)}" de forma org√¢nica

## Tom de Voz Consistente:
- ${cleanedTones || "Tom apropriado"} presente em toda a comunica√ß√£o
- Vocabul√°rio espec√≠fico do segmento da marca
- Personalidade √∫nica e reconhec√≠vel
- Autenticidade e coer√™ncia em cada palavra

# REGRAS T√âCNICAS CR√çTICAS DE SA√çDA

‚ö†Ô∏è ATEN√á√ÉO M√ÅXIMA ‚ö†Ô∏è
- Responda EXCLUSIVAMENTE em JSON v√°lido
- ZERO texto adicional, explica√ß√µes, coment√°rios ou markdown
- ZERO caracteres antes ou depois do JSON
- Estrutura EXATA e OBRIGAT√ìRIA: {"title", "body", "hashtags"}

## ESPECIFICA√á√ïES T√âCNICAS R√çGIDAS:

### "title" (string):
- T√≠tulo magn√©tico de 50-70 caracteres
- Deve funcionar como headline completa
- Inclua emoji impactante (1-2)
- Desperte curiosidade m√°xima
- Conecte marca + tema de forma criativa

### "body" (string):
- Legenda COMPLETA PRONTA PARA POSTAR com M√çNIMO 1.200 caracteres
- IDEAL: 1.500 a 1.800 caracteres (muito importante!)
- Estrutura em EXATAMENTE 4 PAR√ÅGRAFOS bem desenvolvidos + CTA final
- Rico em detalhes, storytelling e valor que complementa a imagem
- Use '\\n\\n' para separar os 4 par√°grafos (importante para formata√ß√£o)
- Use '\\n' apenas para quebras simples dentro de um par√°grafo
- 10-15 emojis distribu√≠dos estrategicamente ao longo do texto
- OBRIGAT√ìRIO: pelo menos 2 perguntas para engajamento
- OBRIGAT√ìRIO: CTA claro e forte no final
- Mencione a marca ${cleanInput(formData.brand)} pelo menos 2 vezes
- Desenvolva profundamente o tema ${cleanInput(formData.theme)}
- Conecte o texto com a descri√ß√£o visual gerada

### "hashtags" (array de strings):
- 10-15 hashtags estrat√©gicas (n√£o 8-12, mas mais!)
- MIX obrigat√≥rio: 40% nicho espec√≠fico + 40% m√©dio alcance + 20% populares
- Primeira hashtag SEMPRE da marca: #${cleanInput(formData.brand).toLowerCase().replace(/\s+/g, "")}
- Segunda hashtag SEMPRE do tema: #${cleanInput(formData.theme).toLowerCase().replace(/\s+/g, "")}
- Restantes relacionadas: setor, benef√≠cio, p√∫blico, emo√ß√£o, a√ß√£o
- SEM o s√≠mbolo # (apenas o texto)
- Todas em lowercase
- Sem espa√ßos ou caracteres especiais

## EXEMPLO DE FORMATA√á√ÉO DO BODY (4 PAR√ÅGRAFOS):
"üöÄ Primeira linha impactante conectando com a imagem! Voc√™ j√° se perguntou sobre [tema relacionado √† imagem]?\\n\\nPAR√ÅGRAFO 1: Contexto rico em detalhes e storytelling envolvente que conecta emocionalmente com o p√∫blico, criando identifica√ß√£o imediata com a situa√ß√£o apresentada na imagem gerada. Use 3-4 linhas bem desenvolvidas.\\n\\nPAR√ÅGRAFO 2: Insight valioso ou problema comum com exemplos pr√°ticos e informa√ß√µes relevantes que agregam valor real. Explique por que isso importa e como se relaciona com o objetivo. Desenvolva em 3-4 linhas completas.\\n\\nPAR√ÅGRAFO 3: Solu√ß√£o ou transforma√ß√£o dispon√≠vel, detalhando benef√≠cios espec√≠ficos e mostrando o diferencial √∫nico da marca. Reforce autoridade e expertise com conte√∫do substancial em 3-4 linhas.\\n\\nPAR√ÅGRAFO 4: Aprofundamento final com dicas pr√°ticas adicionais, conectando com valores da marca e humanizando atrav√©s do prop√≥sito. Prepare para a a√ß√£o em 3-4 linhas impactantes.\\n\\nüí° CTA FINAL: Descubra mais sobre [tema]! O que voc√™ achou dessa abordagem? Comente abaixo e salve este post! üî•üëá"

# VALIDA√á√ÉO FINAL ANTES DE GERAR:
‚úÖ Legenda tem M√çNIMO 1.200 caracteres? (conte!)
‚úÖ EXATAMENTE 4 par√°grafos bem desenvolvidos?
‚úÖ Marca mencionada 2-3 vezes naturalmente?
‚úÖ Tema desenvolvido profundamente?
‚úÖ Legenda conecta com a descri√ß√£o da imagem?
‚úÖ Storytelling envolvente presente?
‚úÖ Valor pr√°tico agregado?
‚úÖ 2+ perguntas para engajamento?
‚úÖ CTA claro e forte no final?
‚úÖ 10-15 hashtags estrat√©gicas?
‚úÖ JSON v√°lido sem nenhum texto extra?

Gere agora a legenda COMPLETA, ELABORADA e EXTENSA em formato JSON puro.
`;
}

serve(async (req) => {
  if (req.method === "OPTIONS") {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const formData = await req.json();
    const LOVABLE_API_KEY = Deno.env.get("LOVABLE_API_KEY");
    
    if (!LOVABLE_API_KEY) {
      throw new Error("LOVABLE_API_KEY is not configured");
    }

    const prompt = buildCaptionPrompt(formData);
    console.log("üìù Gerando legenda com Gemini 2.5...");

    const response = await fetch("https://ai.gateway.lovable.dev/v1/chat/completions", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${LOVABLE_API_KEY}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: "google/gemini-2.5-flash",
        messages: [{ role: "user", content: prompt }],
        temperature: 0.7,
      }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error("Erro na API:", response.status, errorText);
      throw new Error("Falha ao gerar legenda");
    }

    const data = await response.json();
    const content = data.choices?.[0]?.message?.content;

    if (!content) {
      throw new Error("Conte√∫do vazio retornado pela API");
    }

    // Tentar fazer parse do JSON
    let postContent;
    try {
      postContent = JSON.parse(content);
    } catch (parseError) {
      // Se falhar, criar fallback
      console.error("Erro ao fazer parse do JSON, usando fallback");
      postContent = {
        title: `${cleanInput(formData.brand)}: ${cleanInput(formData.theme)} üöÄ`,
        body: `üåü Confira este conte√∫do incr√≠vel sobre ${cleanInput(formData.theme)}!\n\n${cleanInput(formData.description)}\n\nüí° ${cleanInput(formData.objective)}\n\nO que voc√™ achou? Deixe seu coment√°rio! üëá`,
        hashtags: [
          cleanInput(formData.brand).toLowerCase().replace(/\s+/g, ""),
          cleanInput(formData.theme).toLowerCase().replace(/\s+/g, ""),
          "marketing",
          "conteudo",
          "digital"
        ]
      };
    }

    // Valida√ß√£o e corre√ß√£o das hashtags
    if (typeof postContent.hashtags === "string") {
      postContent.hashtags = postContent.hashtags
        .replace(/#/g, "")
        .split(/[\s,]+/)
        .filter(Boolean);
    }

    if (!Array.isArray(postContent.hashtags) || postContent.hashtags.length === 0) {
      postContent.hashtags = [
        cleanInput(formData.brand).toLowerCase().replace(/\s+/g, ""),
        cleanInput(formData.theme).toLowerCase().replace(/\s+/g, ""),
        "marketing"
      ];
    }

    postContent.hashtags = postContent.hashtags
      .map((tag: any) =>
        String(tag)
          .replace(/[^a-zA-Z0-9√°√©√≠√≥√∫√†√®√¨√≤√π√¢√™√Æ√¥√ª√£√µ√ß√Å√â√ç√ì√ö√Ä√à√å√í√ô√Ç√ä√é√î√õ√É√ï√á]/g, "")
          .toLowerCase()
      )
      .filter((tag: string) => tag.length > 0)
      .slice(0, 12);

    console.log("‚úÖ Legenda gerada com sucesso");

    return new Response(
      JSON.stringify(postContent),
      { headers: { ...corsHeaders, "Content-Type": "application/json" } }
    );

  } catch (error) {
    console.error("‚ùå Erro na fun√ß√£o generate-caption:", error);
    
    // Fallback completo
    const formData = await req.json().catch(() => ({}));
    const fallback = {
      title: `${cleanInput(formData.brand || "Marca")}: Novidades üöÄ`,
      body: `üåü Confira nosso novo conte√∫do!\n\n${cleanInput(formData.description || "Conte√∫do exclusivo para voc√™.")}\n\nüí° N√£o perca essa oportunidade!\n\nO que voc√™ achou? Comente abaixo! üëá`,
      hashtags: ["marketing", "conteudo", "digital", "novidades", "dicas"]
    };

    return new Response(
      JSON.stringify(fallback),
      { headers: { ...corsHeaders, "Content-Type": "application/json" } }
    );
  }
});
